name: CI (self-hosted)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

# Nie mehrere gleichzeitige Läufe pro Branch
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # gemeinsame Defaults
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"

jobs:
  backend:
    name: 🧠 Backend • FastAPI + Alembic + Pytest
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 20
    env:
      DATABASE_URL: postgresql+psycopg2://workmate:workmate@localhost:55432/workmate
      PYTHONPATH: ${{ github.workspace }}/backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ✅ System-Python verwenden + venv anlegen und in PATH hängen
      - name: Setup system Python venv
        run: |
          set -euo pipefail
          PY=$(command -v python || command- v python3)
          echo "Using Python at: $PY"
          "$PY" --version
          "$PY" -m venv .venv
          echo "$PWD/.venv/bin" >> "$GITHUB_PATH"
          .venv/bin/python -m pip install --upgrade pip

      - name: Install deps
        run: |
          pip --version
          pip install -r backend/requirements.txt
          pip install pytest pytest-asyncio httpx requests psycopg2-binary

      - name: 🧱 Start Postgres (Docker)
        run: |
          docker rm -f workmate-db 2>/dev/null || true
          docker run -d --name workmate-db \
            -e POSTGRES_DB=workmate \
            -e POSTGRES_USER=workmate \
            -e POSTGRES_PASSWORD=workmate \
            -p 55432:5432 postgres:16
          echo "Waiting for Postgres..."
          for i in {1..90}; do
            docker exec workmate-db pg_isready -U workmate -d workmate >/dev/null 2>&1 && { echo "Postgres ready"; break; }
            sleep 2
          done

      - name: 🔁 Alembic upgrade
        working-directory: backend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: alembic upgrade head

      - name: 🚀 Start API (background)
        working-directory: backend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          nohup .venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000 > uvicorn.log 2>&1 &
          echo $! > uvicorn.pid
          sleep 1

      - name: ⏳ Wait for readiness
        run: |
          for i in {1..60}; do
            curl -fsS http://127.0.0.1:8000/api/ready && exit 0
            sleep 1
          done
          echo "❌ API not ready on :8000" >&2
          echo "----- uvicorn.log (tail) -----"
          sed -n '1,200p' backend/uvicorn.log || true
          exit 1

      - name: 🧪 Pytest
        working-directory: backend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: pytest -q

      - name: 📜 Show API log on failure
        if: failure()
        working-directory: backend
        run: |
          echo "----- uvicorn.log (tail) -----"
          tail -n 200 uvicorn.log || true

      - name: 🧹 Cleanup (always)
        if: always()
        run: |
          if [ -f backend/uvicorn.pid ]; then kill "$(cat backend/uvicorn.pid)" 2>/dev/null || true; fi
          docker rm -f workmate-db 2>/dev/null || true


  frontend:
    name: 💻 Frontend • Vite/Vue build
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ui
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 🧩 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"                       # <-- pnpm statt npm
          cache-dependency-path: ui/pnpm-lock.yaml

      - name: Enable corepack (pnpm)
        run: corepack enable

      # optional: pnpm-Version pinnen
      # - run: corepack prepare pnpm@8.15.8 --activate

      - name: 📦 Install (pnpm)
        run: pnpm install --frozen-lockfile   # <-- statt npm ci

      - name: 🔧 Type Check (optional)
        run: npx vue-tsc --noEmit

      - name: 🏗️ Build
        run: pnpm build

      - name: "📦 Artefakt: dist"
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ui-dist
          path: ui/dist
          if-no-files-found: error
          retention-days: 7

  done:
    name: ✅ All good
    runs-on: [self-hosted, Linux, X64]
    needs: [backend, frontend]
    steps:
      - run: echo "Backend + Frontend erfolgreich gebaut & getestet 🎉"
